{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport data from '../data.json';\nconst boardsSlice = createSlice({\n  name: 'boards',\n  initialState: data.boards,\n  reducers: {\n    getBoard: (state, action) => {\n      const isActive = state.length > 0 ? false : true;\n      const payload = action.payload;\n      const board = {\n        name: payload.name,\n        isActive,\n        columns: []\n      };\n      board.columns = payload.newColumns;\n      state.push(board);\n    },\n    addBoard: (state, action) => {\n      const isActive = state.length > 0 ? false : true;\n      const payload = action.payload;\n      const board = {\n        name: payload.name,\n        isActive,\n        columns: []\n      };\n      board.columns = payload.newColumns;\n      state.push(board);\n    },\n    editBoard: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      board.name = payload.name;\n      board.columns = payload.newColumns;\n    },\n    deleteBoard: state => {\n      const board = state.find(board => board.isActive);\n      state.splice(state.indexOf(board), 1);\n    },\n    setBoardActive: (state, action) => {\n      state.map((board, index) => {\n        index === action.payload.index ? board.isActive = true : board.isActive = false;\n        return board;\n      });\n    },\n    addTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        newColIndex\n      } = action.payload;\n      const task = {\n        title,\n        description,\n        subtasks,\n        status\n      };\n      const board = state.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === newColIndex);\n      column.tasks.push(task);\n    },\n    editTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        prevColIndex,\n        newColIndex,\n        taskIndex\n      } = action.payload;\n      const board = state.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === prevColIndex);\n      const task = column.tasks.find((task, index) => index === taskIndex);\n      task.title = title;\n      task.status = status;\n      task.description = description;\n      task.subtasks = subtasks;\n      if (prevColIndex === newColIndex) return;\n      column.tasks = column.tasks.filter((task, index) => index !== taskIndex);\n      const newCol = board.columns.find((col, index) => index === newColIndex);\n      newCol.tasks.push(task);\n    },\n    dragTask: (state, action) => {\n      const {\n        colIndex,\n        prevColIndex,\n        taskIndex\n      } = action.payload;\n      const board = state.find(board => board.isActive);\n      const prevCol = board.columns.find((col, i) => i === prevColIndex);\n      const task = prevCol.tasks.splice(taskIndex, 1)[0];\n      board.columns.find((col, i) => i === colIndex).tasks.push(task);\n    },\n    setSubtaskCompleted: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      const subtask = task.subtasks.find((subtask, i) => i === payload.index);\n      subtask.isCompleted = !subtask.isCompleted;\n    },\n    setTaskStatus: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const columns = board.columns;\n      const col = columns.find((col, i) => i === payload.colIndex);\n      if (payload.colIndex === payload.newColIndex) return;\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      task.status = payload.status;\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n      const newCol = columns.find((col, i) => i === payload.newColIndex);\n      newCol.tasks.push(task);\n    },\n    deleteTask: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n    }\n  }\n});\nexport default boardsSlice;","map":{"version":3,"names":["createSlice","data","boardsSlice","name","initialState","boards","reducers","getBoard","state","action","isActive","length","payload","board","columns","newColumns","push","addBoard","editBoard","find","deleteBoard","splice","indexOf","setBoardActive","map","index","addTask","title","status","description","subtasks","newColIndex","task","column","col","tasks","editTask","prevColIndex","taskIndex","filter","newCol","dragTask","colIndex","prevCol","i","setSubtaskCompleted","subtask","isCompleted","setTaskStatus","deleteTask"],"sources":["/Users/admin/Davron/codes/taskt_xalq/n/src/redux/boardsSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport data from '../data.json';\n\nconst boardsSlice = createSlice({\n\tname: 'boards',\n\tinitialState: data.boards,\n\treducers: {\n\t\tgetBoard: (state, action) => {\n\t\t\tconst isActive = state.length > 0 ? false : true;\n\t\t\tconst payload = action.payload;\n\t\t\tconst board = {\n\t\t\t\tname: payload.name,\n\t\t\t\tisActive,\n\t\t\t\tcolumns: [],\n\t\t\t};\n\t\t\tboard.columns = payload.newColumns;\n\t\t\tstate.push(board);\n\t\t},\n\t\taddBoard: (state, action) => {\n\t\t\tconst isActive = state.length > 0 ? false : true;\n\t\t\tconst payload = action.payload;\n\t\t\tconst board = {\n\t\t\t\tname: payload.name,\n\t\t\t\tisActive,\n\t\t\t\tcolumns: [],\n\t\t\t};\n\t\t\tboard.columns = payload.newColumns;\n\t\t\tstate.push(board);\n\t\t},\n\t\teditBoard: (state, action) => {\n\t\t\tconst payload = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tboard.name = payload.name;\n\t\t\tboard.columns = payload.newColumns;\n\t\t},\n\t\tdeleteBoard: (state) => {\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tstate.splice(state.indexOf(board), 1);\n\t\t},\n\t\tsetBoardActive: (state, action) => {\n\t\t\tstate.map((board, index) => {\n\t\t\t\tindex === action.payload.index\n\t\t\t\t\t? (board.isActive = true)\n\t\t\t\t\t: (board.isActive = false);\n\t\t\t\treturn board;\n\t\t\t});\n\t\t},\n\t\taddTask: (state, action) => {\n\t\t\tconst { title, status, description, subtasks, newColIndex } =\n\t\t\t\taction.payload;\n\t\t\tconst task = { title, description, subtasks, status };\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst column = board.columns.find(\n\t\t\t\t(col, index) => index === newColIndex\n\t\t\t);\n\t\t\tcolumn.tasks.push(task);\n\t\t},\n\t\teditTask: (state, action) => {\n\t\t\tconst {\n\t\t\t\ttitle,\n\t\t\t\tstatus,\n\t\t\t\tdescription,\n\t\t\t\tsubtasks,\n\t\t\t\tprevColIndex,\n\t\t\t\tnewColIndex,\n\t\t\t\ttaskIndex,\n\t\t\t} = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst column = board.columns.find(\n\t\t\t\t(col, index) => index === prevColIndex\n\t\t\t);\n\t\t\tconst task = column.tasks.find(\n\t\t\t\t(task, index) => index === taskIndex\n\t\t\t);\n\t\t\ttask.title = title;\n\t\t\ttask.status = status;\n\t\t\ttask.description = description;\n\t\t\ttask.subtasks = subtasks;\n\t\t\tif (prevColIndex === newColIndex) return;\n\t\t\tcolumn.tasks = column.tasks.filter(\n\t\t\t\t(task, index) => index !== taskIndex\n\t\t\t);\n\t\t\tconst newCol = board.columns.find(\n\t\t\t\t(col, index) => index === newColIndex\n\t\t\t);\n\t\t\tnewCol.tasks.push(task);\n\t\t},\n\t\tdragTask: (state, action) => {\n\t\t\tconst { colIndex, prevColIndex, taskIndex } = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst prevCol = board.columns.find((col, i) => i === prevColIndex);\n\t\t\tconst task = prevCol.tasks.splice(taskIndex, 1)[0];\n\t\t\tboard.columns.find((col, i) => i === colIndex).tasks.push(task);\n\t\t},\n\t\tsetSubtaskCompleted: (state, action) => {\n\t\t\tconst payload = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst col = board.columns.find((col, i) => i === payload.colIndex);\n\t\t\tconst task = col.tasks.find((task, i) => i === payload.taskIndex);\n\t\t\tconst subtask = task.subtasks.find(\n\t\t\t\t(subtask, i) => i === payload.index\n\t\t\t);\n\t\t\tsubtask.isCompleted = !subtask.isCompleted;\n\t\t},\n\t\tsetTaskStatus: (state, action) => {\n\t\t\tconst payload = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst columns = board.columns;\n\t\t\tconst col = columns.find((col, i) => i === payload.colIndex);\n\t\t\tif (payload.colIndex === payload.newColIndex) return;\n\t\t\tconst task = col.tasks.find((task, i) => i === payload.taskIndex);\n\t\t\ttask.status = payload.status;\n\t\t\tcol.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n\t\t\tconst newCol = columns.find((col, i) => i === payload.newColIndex);\n\t\t\tnewCol.tasks.push(task);\n\t\t},\n\t\tdeleteTask: (state, action) => {\n\t\t\tconst payload = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst col = board.columns.find((col, i) => i === payload.colIndex);\n\t\t\tcol.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n\t\t},\n\t},\n});\n\nexport default boardsSlice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}