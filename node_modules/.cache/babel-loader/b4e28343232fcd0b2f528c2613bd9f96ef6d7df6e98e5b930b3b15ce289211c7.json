{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport data from '../data.json';\nconst boardsSlice = createSlice({\n  name: 'boards',\n  initialState: data.boards,\n  reducers: {\n    initialBoard: (state, action) => {\n      const isActive = state.length > 0 ? false : true;\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      console.log(payload, board.name, board.columns[0].name);\n\n      // board.columns.\n    },\n\n    editBoard: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      board.name = payload.name;\n      board.columns = payload.newColumns;\n    },\n    deleteBoard: state => {\n      const board = state.find(board => board.isActive);\n      state.splice(state.indexOf(board), 1);\n    },\n    setBoardActive: (state, action) => {\n      state.map((board, index) => {\n        index === action.payload.index ? board.isActive = true : board.isActive = false;\n        return board;\n      });\n    },\n    addTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        newColIndex,\n        file\n      } = action.payload;\n      const task = {\n        title,\n        description,\n        subtasks,\n        status,\n        file\n      };\n      const board = state.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === newColIndex);\n      column.tasks.push(task);\n    },\n    editTask: (state, action) => {\n      const {\n        title,\n        status,\n        description,\n        subtasks,\n        prevColIndex,\n        newColIndex,\n        taskIndex,\n        file\n      } = action.payload;\n      const board = state.find(board => board.isActive);\n      const column = board.columns.find((col, index) => index === prevColIndex);\n      const task = column.tasks.find((task, index) => index === taskIndex);\n      task.title = title;\n      task.status = status;\n      task.description = description;\n      task.subtasks = subtasks;\n      task.file = file;\n      if (prevColIndex === newColIndex) return;\n      column.tasks = column.tasks.filter((task, index) => index !== taskIndex);\n      const newCol = board.columns.find((col, index) => index === newColIndex);\n      newCol.tasks.push(task);\n    },\n    dragTask: (state, action) => {\n      const {\n        colIndex,\n        prevColIndex,\n        taskIndex\n      } = action.payload;\n      const board = state.find(board => board.isActive);\n      const prevCol = board.columns.find((col, i) => i === prevColIndex);\n      const task = prevCol.tasks.splice(taskIndex, 1)[0];\n      board.columns.find((col, i) => i === colIndex).tasks.push(task);\n    },\n    setSubtaskCompleted: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      const subtask = task.subtasks.find((subtask, i) => i === payload.index);\n      subtask.isCompleted = !subtask.isCompleted;\n    },\n    setTaskStatus: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const columns = board.columns;\n      const col = columns.find((col, i) => i === payload.colIndex);\n      if (payload.colIndex === payload.newColIndex) return;\n      const task = col.tasks.find((task, i) => i === payload.taskIndex);\n      task.status = payload.status;\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n      const newCol = columns.find((col, i) => i === payload.newColIndex);\n      newCol.tasks.push(task);\n    },\n    deleteTask: (state, action) => {\n      const payload = action.payload;\n      const board = state.find(board => board.isActive);\n      const col = board.columns.find((col, i) => i === payload.colIndex);\n      col.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n    }\n  }\n});\nexport default boardsSlice;","map":{"version":3,"names":["createSlice","data","boardsSlice","name","initialState","boards","reducers","initialBoard","state","action","isActive","length","payload","board","find","console","log","columns","editBoard","newColumns","deleteBoard","splice","indexOf","setBoardActive","map","index","addTask","title","status","description","subtasks","newColIndex","file","task","column","col","tasks","push","editTask","prevColIndex","taskIndex","filter","newCol","dragTask","colIndex","prevCol","i","setSubtaskCompleted","subtask","isCompleted","setTaskStatus","deleteTask"],"sources":["/Users/admin/Davron/codes/taskt_xalq/n/src/redux/boardsSlice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nimport data from '../data.json';\n\nconst boardsSlice = createSlice({\n\tname: 'boards',\n\tinitialState: data.boards,\n\treducers: {\n\t\tinitialBoard: (state, action) => {\n\t\t\tconst isActive = state.length > 0 ? false : true;\n\t\t\tconst payload = action.payload;\n\n\t\t\tconst board = state.find((board) => board.isActive);\n\n\t\t\tconsole.log(payload, board.name, board.columns[0].name);\n\n\t\t\t// board.columns.\n\t\t},\n\t\teditBoard: (state, action) => {\n\t\t\tconst payload = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tboard.name = payload.name;\n\t\t\tboard.columns = payload.newColumns;\n\t\t},\n\t\tdeleteBoard: (state) => {\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tstate.splice(state.indexOf(board), 1);\n\t\t},\n\t\tsetBoardActive: (state, action) => {\n\t\t\tstate.map((board, index) => {\n\t\t\t\tindex === action.payload.index\n\t\t\t\t\t? (board.isActive = true)\n\t\t\t\t\t: (board.isActive = false);\n\t\t\t\treturn board;\n\t\t\t});\n\t\t},\n\t\taddTask: (state, action) => {\n\t\t\tconst { title, status, description, subtasks, newColIndex, file } =\n\t\t\t\taction.payload;\n\t\t\tconst task = { title, description, subtasks, status, file };\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst column = board.columns.find(\n\t\t\t\t(col, index) => index === newColIndex\n\t\t\t);\n\t\t\tcolumn.tasks.push(task);\n\t\t},\n\t\teditTask: (state, action) => {\n\t\t\tconst {\n\t\t\t\ttitle,\n\t\t\t\tstatus,\n\t\t\t\tdescription,\n\t\t\t\tsubtasks,\n\t\t\t\tprevColIndex,\n\t\t\t\tnewColIndex,\n\t\t\t\ttaskIndex,\n\t\t\t\tfile,\n\t\t\t} = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst column = board.columns.find(\n\t\t\t\t(col, index) => index === prevColIndex\n\t\t\t);\n\t\t\tconst task = column.tasks.find(\n\t\t\t\t(task, index) => index === taskIndex\n\t\t\t);\n\t\t\ttask.title = title;\n\t\t\ttask.status = status;\n\t\t\ttask.description = description;\n\t\t\ttask.subtasks = subtasks;\n\t\t\ttask.file = file;\n\t\t\tif (prevColIndex === newColIndex) return;\n\t\t\tcolumn.tasks = column.tasks.filter(\n\t\t\t\t(task, index) => index !== taskIndex\n\t\t\t);\n\t\t\tconst newCol = board.columns.find(\n\t\t\t\t(col, index) => index === newColIndex\n\t\t\t);\n\t\t\tnewCol.tasks.push(task);\n\t\t},\n\t\tdragTask: (state, action) => {\n\t\t\tconst { colIndex, prevColIndex, taskIndex } = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst prevCol = board.columns.find((col, i) => i === prevColIndex);\n\t\t\tconst task = prevCol.tasks.splice(taskIndex, 1)[0];\n\t\t\tboard.columns.find((col, i) => i === colIndex).tasks.push(task);\n\t\t},\n\t\tsetSubtaskCompleted: (state, action) => {\n\t\t\tconst payload = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst col = board.columns.find((col, i) => i === payload.colIndex);\n\t\t\tconst task = col.tasks.find((task, i) => i === payload.taskIndex);\n\t\t\tconst subtask = task.subtasks.find(\n\t\t\t\t(subtask, i) => i === payload.index\n\t\t\t);\n\t\t\tsubtask.isCompleted = !subtask.isCompleted;\n\t\t},\n\t\tsetTaskStatus: (state, action) => {\n\t\t\tconst payload = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst columns = board.columns;\n\t\t\tconst col = columns.find((col, i) => i === payload.colIndex);\n\t\t\tif (payload.colIndex === payload.newColIndex) return;\n\t\t\tconst task = col.tasks.find((task, i) => i === payload.taskIndex);\n\t\t\ttask.status = payload.status;\n\t\t\tcol.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n\t\t\tconst newCol = columns.find((col, i) => i === payload.newColIndex);\n\t\t\tnewCol.tasks.push(task);\n\t\t},\n\t\tdeleteTask: (state, action) => {\n\t\t\tconst payload = action.payload;\n\t\t\tconst board = state.find((board) => board.isActive);\n\t\t\tconst col = board.columns.find((col, i) => i === payload.colIndex);\n\t\t\tcol.tasks = col.tasks.filter((task, i) => i !== payload.taskIndex);\n\t\t},\n\t},\n});\n\nexport default boardsSlice;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}