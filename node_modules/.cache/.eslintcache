[{"/Users/admin/Davron/codes/taskt_xalq/n/src/index.js":"1","/Users/admin/Davron/codes/taskt_xalq/n/src/App.js":"2","/Users/admin/Davron/codes/taskt_xalq/n/src/redux/store.js":"3","/Users/admin/Davron/codes/taskt_xalq/n/src/redux/boardsSlice.js":"4","/Users/admin/Davron/codes/taskt_xalq/n/src/components/Home.js":"5","/Users/admin/Davron/codes/taskt_xalq/n/src/components/Header.js":"6","/Users/admin/Davron/codes/taskt_xalq/n/src/components/EmptyBoard.js":"7","/Users/admin/Davron/codes/taskt_xalq/n/src/components/ElipsisMenu.js":"8","/Users/admin/Davron/codes/taskt_xalq/n/src/components/Column.js":"9","/Users/admin/Davron/codes/taskt_xalq/n/src/components/Sidebar.js":"10","/Users/admin/Davron/codes/taskt_xalq/n/src/components/HeaderDropDown.js":"11","/Users/admin/Davron/codes/taskt_xalq/n/src/modals/AddEditTaskModal.js":"12","/Users/admin/Davron/codes/taskt_xalq/n/src/modals/DeleteModal.js":"13","/Users/admin/Davron/codes/taskt_xalq/n/src/modals/AddEditBoardModal.js":"14","/Users/admin/Davron/codes/taskt_xalq/n/src/components/Task.js":"15","/Users/admin/Davron/codes/taskt_xalq/n/src/hooks/useDarkMode.js":"16","/Users/admin/Davron/codes/taskt_xalq/n/src/modals/TaskModal.js":"17","/Users/admin/Davron/codes/taskt_xalq/n/src/components/Subtask.js":"18","/Users/admin/Davron/codes/taskt_xalq/n/src/services/baseUrl.js":"19"},{"size":379,"mtime":1681516192947,"results":"20","hashOfConfig":"21"},{"size":1557,"mtime":1681523592375,"results":"22","hashOfConfig":"21"},{"size":200,"mtime":1681516192948,"results":"23","hashOfConfig":"21"},{"size":3667,"mtime":1681523604924,"results":"24","hashOfConfig":"21"},{"size":2403,"mtime":1681516192946,"results":"25","hashOfConfig":"21"},{"size":4043,"mtime":1681517315897,"results":"26","hashOfConfig":"21"},{"size":1101,"mtime":1681516192946,"results":"27","hashOfConfig":"21"},{"size":930,"mtime":1681516192946,"results":"28","hashOfConfig":"21"},{"size":1678,"mtime":1681516192946,"results":"29","hashOfConfig":"21"},{"size":5031,"mtime":1681522909531,"results":"30","hashOfConfig":"21"},{"size":3250,"mtime":1681516192946,"results":"31","hashOfConfig":"21"},{"size":7954,"mtime":1681521584513,"results":"32","hashOfConfig":"21"},{"size":1748,"mtime":1681516192947,"results":"33","hashOfConfig":"21"},{"size":4909,"mtime":1681516192947,"results":"34","hashOfConfig":"21"},{"size":1618,"mtime":1681516192946,"results":"35","hashOfConfig":"21"},{"size":468,"mtime":1681516192947,"results":"36","hashOfConfig":"21"},{"size":4813,"mtime":1681519007332,"results":"37","hashOfConfig":"21"},{"size":1183,"mtime":1681516192946,"results":"38","hashOfConfig":"21"},{"size":367,"mtime":1681520766890,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"1vmcyrs",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"43"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"43"},{"filePath":"78","messages":"79","suppressedMessages":"80","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"43"},{"filePath":"82","messages":"83","suppressedMessages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"85","messages":"86","suppressedMessages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"43"},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"43"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"99","messages":"100","suppressedMessages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"102","messages":"103","suppressedMessages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"/Users/admin/Davron/codes/taskt_xalq/n/src/index.js",[],[],[],"/Users/admin/Davron/codes/taskt_xalq/n/src/App.js",["105","106","107","108"],[],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Header from './components/Header';\nimport Home from './components/Home';\nimport EmptyBoard from './components/EmptyBoard';\nimport boardsSlice from './redux/boardsSlice';\nimport { deleteTask, getTasks } from './services/baseUrl';\n\nfunction App() {\n\tconst [isBoardModalOpen, setIsBoardModalOpen] = useState(false);\n\tconst dispatch = useDispatch();\n\tconst boards = useSelector((state) => state.boards);\n\tconst activeBoard = boards.find((board) => board.isActive);\n\tif (!activeBoard && boards.length > 0)\n\t\tdispatch(boardsSlice.actions.setBoardActive({ index: 0 }));\n\n\tconst [loading, setLoading] = useState(true);\n\tconst [tasks, setTasks] = useState([]);\n\n\tuseEffect(() => {\n\t\tgetTasks().then((data) => {\n\t\t\t\n\t\t\tconsole.log(data.data);\n\t\t\tconst tasksArray = data.data.reduce((acc, obj) => {\n\t\t\t\treturn [...acc, ...obj.tasks];\n\t\t\t}, []);\n\t\t\tconsole.log(tasksArray);\n\n\t\t\tdispatch(boardsSlice.actions.initialBoard(tasksArray));\n\t\t\tsetLoading(false);\n\t\t});\n\t}, []);\n\n\tif (loading) {\n\t\treturn;\n\t}\n\treturn (\n\t\t<div className=' overflow-hidden  overflow-x-scroll'>\n\t\t\t<>\n\t\t\t\t{boards.length > 0 ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<Header\n\t\t\t\t\t\t\tsetIsBoardModalOpen={setIsBoardModalOpen}\n\t\t\t\t\t\t\tisBoardModalOpen={isBoardModalOpen}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Home\n\t\t\t\t\t\t\tsetIsBoardModalOpen={setIsBoardModalOpen}\n\t\t\t\t\t\t\tisBoardModalOpen={isBoardModalOpen}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</>\n\t\t\t\t) : (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<EmptyBoard type='add' />\n\t\t\t\t\t</>\n\t\t\t\t)}\n\t\t\t</>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","/Users/admin/Davron/codes/taskt_xalq/n/src/redux/store.js",[],[],"/Users/admin/Davron/codes/taskt_xalq/n/src/redux/boardsSlice.js",[],[],"/Users/admin/Davron/codes/taskt_xalq/n/src/components/Home.js",[],[],"/Users/admin/Davron/codes/taskt_xalq/n/src/components/Header.js",[],[],"/Users/admin/Davron/codes/taskt_xalq/n/src/components/EmptyBoard.js",[],[],"/Users/admin/Davron/codes/taskt_xalq/n/src/components/ElipsisMenu.js",[],[],"/Users/admin/Davron/codes/taskt_xalq/n/src/components/Column.js",["109"],[],"import { shuffle } from \"lodash\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport boardsSlice from \"../redux/boardsSlice\";\nimport Task from \"./Task\";\n\nfunction Column({ colIndex }) {\n  const colors = [\n    \"bg-red-500\",\n    \"bg-orange-500\",\n    \"bg-blue-500\",\n    \"bg-purple-500\",\n    \"bg-green-500\",\n    \"bg-indigo-500\",\n    \"bg-yellow-500\",\n    \"bg-pink-500\",\n    \"bg-sky-500\",\n  ];\n\n  \n\n  const dispatch = useDispatch();\n  const [color, setColor] = useState(null)\n  const boards = useSelector((state) => state.boards);\n  const board = boards.find((board) => board.isActive === true);\n  const col = board.columns.find((col, i) => i === colIndex);\n  useEffect(() => {\n    setColor(shuffle(colors).pop())\n  }, [dispatch]);\n\n\n\n  const handleOnDrop = (e) => {\n    const { prevColIndex, taskIndex } = JSON.parse(\n      e.dataTransfer.getData(\"text\")\n    );\n\n    if (colIndex !== prevColIndex) {\n      dispatch(\n        boardsSlice.actions.dragTask({ colIndex, prevColIndex, taskIndex })\n      );\n    }\n  };\n\n  const handleOnDragOver = (e) => {\n    e.preventDefault();\n  };\n\n  return (\n    <div\n      onDrop={handleOnDrop}\n      onDragOver={handleOnDragOver}\n      className=\"scrollbar-hide   mx-5 pt-[90px] min-w-[280px] \"\n    >\n      <p className=\" font-semibold flex  items-center  gap-2 tracking-widest md:tracking-[.2em] text-[#828fa3]\">\n        <div className={`rounded-full w-4 h-4 ${color} `} />\n        {col.name} ({col.tasks.length})\n      </p>\n\n      {col.tasks.map((task, index) => (\n        <Task key={index} taskIndex={index} colIndex={colIndex} />\n      ))}\n    </div>\n  );\n}\n\nexport default Column;\n","/Users/admin/Davron/codes/taskt_xalq/n/src/components/Sidebar.js",["110","111"],[],"import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Switch } from '@headlessui/react';\nimport boardIcon from '../assets/icon-board.svg';\nimport useDarkMode from '../hooks/useDarkMode';\nimport darkIcon from '../assets/icon-dark-theme.svg';\nimport lightIcon from '../assets/icon-light-theme.svg';\n\nimport showSidebarIcon from '../assets/icon-show-sidebar.svg';\nimport hideSidebarIcon from '../assets/icon-hide-sidebar.svg';\n\nimport boardsSlice from '../redux/boardsSlice';\nimport AddEditBoardModal from '../modals/AddEditBoardModal';\n\nfunction Sidebar({ isSideBarOpen, setIsSideBarOpen }) {\n\tconst dispatch = useDispatch();\n\tconst [isBoardModalOpen, setIsBoardModalOpen] = useState(false);\n\tconst [colorTheme, setTheme] = useDarkMode();\n\tconst [darkSide, setDarkSide] = useState(\n\t\tcolorTheme === 'light' ? true : false\n\t);\n\n\tconst toggleDarkMode = (checked) => {\n\t\tsetTheme(colorTheme);\n\t\tsetDarkSide(checked);\n\t};\n\n\tconst boards = useSelector((state) => state.boards);\n\n\tconst toggleSidebar = () => {\n\t\tsetIsSideBarOpen((curr) => !curr);\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\t\tisSideBarOpen\n\t\t\t\t\t\t? `min-w-[261px] bg-white dark:bg-[#2b2c37]  fixed top-[72px] h-screen  items-center left-0 z-20`\n\t\t\t\t\t\t: ` bg-[#635FC7] dark:bg-[#2b2c37] dark:hover:bg-[#635FC7] top-auto bottom-10 justify-center items-center hover:opacity-80 cursor-pointer  p-0 transition duration-300 transform fixed felx w-[56px] h-[48px] rounded-r-full  `\n\t\t\t\t}>\n\t\t\t\t<div>\n\t\t\t\t\t{isSideBarOpen && (\n\t\t\t\t\t\t<div className=' bg-white  dark:bg-[#2b2c37]    w-full   py-4 rounded-xl'>\n\t\t\t\t\t\t\t<h3 className=' dark:text-gray-300 text-gray-600 font-semibold mx-4 mb-8 '>\n\t\t\t\t\t\t\t\tALL BOARDS ({boards?.length})\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<p className='opacity-50 m-3'>\n\t\t\t\t\t\t\t\tDon't delete Test1 board <br /> to use CRUD with\n\t\t\t\t\t\t\t\tAPI\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<div className='  dropdown-borad flex flex-col h-[70vh]  justify-between '>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t{boards.map((board, index) => (\n\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\tclassName={` flex items-baseline space-x-2 px-5 mr-8 rounded-r-full duration-500 ease-in-out py-4 cursor-pointer hover:bg-[#635fc71a] hover:text-[#635fc7] dark:hover:bg-white dark:hover:text-[#635fc7] dark:text-white  ${\n\t\t\t\t\t\t\t\t\t\t\t\tboard.isActive &&\n\t\t\t\t\t\t\t\t\t\t\t\t' bg-[#635fc7] rounded-r-full text-white mr-8 '\n\t\t\t\t\t\t\t\t\t\t\t} `}\n\t\t\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\t\tdispatch(\n\t\t\t\t\t\t\t\t\t\t\t\t\tboardsSlice.actions.setBoardActive(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t{ index }\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\t\tsrc={boardIcon}\n\t\t\t\t\t\t\t\t\t\t\t\tclassName='  filter-white  h-4 '\n\t\t\t\t\t\t\t\t\t\t\t/>{' '}\n\t\t\t\t\t\t\t\t\t\t\t<p className=' text-lg font-bold '>\n\t\t\t\t\t\t\t\t\t\t\t\t{board.name}\n\t\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t))}\n\n\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\tclassName=' flex  items-baseline space-x-2  mr-8 rounded-r-full duration-500 ease-in-out cursor-pointer text-[#635fc7] px-5 py-4 hover:bg-[#635fc71a] hover:text-[#635fc7] dark:hover:bg-white  '\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tsetIsBoardModalOpen(true);\n\t\t\t\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\t\tsrc={boardIcon}\n\t\t\t\t\t\t\t\t\t\t\tclassName='   filter-white  h-4 '\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t<p className=' text-lg font-bold  '>\n\t\t\t\t\t\t\t\t\t\t\tCreate New Board{' '}\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div className=' mx-2  mb-8 p-4 relative space-x-2 bg-slate-100 dark:bg-[#20212c] flex justify-center items-center rounded-lg'>\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={lightIcon}\n\t\t\t\t\t\t\t\t\t\talt='sun indicating light mode'\n\t\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\t\t\t\tchecked={darkSide}\n\t\t\t\t\t\t\t\t\t\tonChange={toggleDarkMode}\n\t\t\t\t\t\t\t\t\t\tclassName={`${\n\t\t\t\t\t\t\t\t\t\t\tdarkSide\n\t\t\t\t\t\t\t\t\t\t\t\t? 'bg-[#635fc7]'\n\t\t\t\t\t\t\t\t\t\t\t\t: 'bg-gray-200'\n\t\t\t\t\t\t\t\t\t\t} relative inline-flex h-6 w-11 items-center rounded-full`}>\n\t\t\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\t\t\tclassName={`${\n\t\t\t\t\t\t\t\t\t\t\t\tdarkSide\n\t\t\t\t\t\t\t\t\t\t\t\t\t? 'translate-x-6'\n\t\t\t\t\t\t\t\t\t\t\t\t\t: 'translate-x-1'\n\t\t\t\t\t\t\t\t\t\t\t} inline-block h-4 w-4 transform rounded-full bg-white transition`}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t</Switch>\n\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tsrc={darkIcon}\n\t\t\t\t\t\t\t\t\t\talt='moon indicating dark mode'\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\n\t\t\t\t\t{isSideBarOpen ? (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tonClick={() => toggleSidebar()}\n\t\t\t\t\t\t\tclassName=' flex  items-center mt-2  absolute bottom-16  text-lg font-bold  rounded-r-full hover:text-[#635FC7] cursor-pointer mr-6 mb-2 px-8 py-4 hover:bg-[#635fc71a] dark:hover:bg-white  space-x-2 justify-center  my-4 text-gray-500 '>\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tclassName=' min-w-[20px]'\n\t\t\t\t\t\t\t\tsrc={hideSidebarIcon}\n\t\t\t\t\t\t\t\talt=' side bar show/hide'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t{isSideBarOpen && <p> Hide Sidebar </p>}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<div\n\t\t\t\t\t\t\tclassName=' absolute p-5  '\n\t\t\t\t\t\t\tonClick={() => toggleSidebar()}>\n\t\t\t\t\t\t\t<img src={showSidebarIcon} alt='showSidebarIcon' />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t{isBoardModalOpen && (\n\t\t\t\t<AddEditBoardModal\n\t\t\t\t\ttype='add'\n\t\t\t\t\tsetIsBoardModalOpen={setIsBoardModalOpen}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t);\n}\n\nexport default Sidebar;\n","/Users/admin/Davron/codes/taskt_xalq/n/src/components/HeaderDropDown.js",["112","113"],[],"import React, { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Switch } from \"@headlessui/react\";\nimport boardIcon from \"../assets/icon-board.svg\";\nimport useDarkMode from \"../hooks/useDarkMode\";\nimport darkIcon from \"../assets/icon-dark-theme.svg\";\nimport lightIcon from \"../assets/icon-light-theme.svg\";\nimport boardsSlice from \"../redux/boardsSlice\";\n\n\nfunction HeaderDropDown({ setOpenDropdown, setIsBoardModalOpen }) {\n  const dispatch = useDispatch()\n  const [colorTheme, setTheme] = useDarkMode();\n  const [darkSide, setDarkSide] = useState(\n    colorTheme === \"light\" ? true : false\n  );\n\n  const toggleDarkMode = (checked) => {\n    setTheme(colorTheme);\n    setDarkSide(checked);\n  };\n\n  const boards = useSelector((state) => state.boards);\n\n  return (\n    <div\n      className=\" py-10 px-6 absolute  left-0 right-0 bottom-[-100vh] top-16 dropdown \"\n      onClick={(e) => {\n        if (e.target !== e.currentTarget) {\n          return;\n        }\n        setOpenDropdown(false);\n      }}\n    >\n      {/* DropDown Modal */}\n\n      <div className=\" bg-white dark:bg-[#2b2c37] shadow-md shadow-[#364e7e1a]  w-full   py-4 rounded-xl\">\n        <h3 className=\" dark:text-gray-300 text-gray-600 font-semibold mx-4 mb-8 \">\n          ALL BOARDS ({boards?.length})\n        </h3>\n\n        <div className=\" dropdown-borad  \">\n          {boards.map((board, index) => (\n            <div\n              className={` flex items-baseline space-x-2 px-5 py-4  ${\n                board.isActive &&\n                \" bg-[#635fc7] rounded-r-full text-white mr-8 \"\n              } `}\n              key={index}\n              onClick={() => {\n                dispatch(boardsSlice.actions.setBoardActive({ index }));\n              }}\n            >\n              <img src={boardIcon} className=\"  filter-white  h-4 \" />{\" \"}\n              <p className=\" text-lg font-bold  \">{board.name}</p>\n            </div>\n          ))}\n\n          <div \n          onClick={() => {\n            setIsBoardModalOpen(true);\n            setOpenDropdown(false)\n          }}\n          className=\" flex items-baseline space-x-2  text-[#635fc7] px-5 py-4  \">\n            <img src={boardIcon} className=\"   filter-white  h-4 \" />\n            <p className=\" text-lg font-bold  \">Create New Board </p>\n          </div>\n\n          <div className=\" mx-2  p-4  space-x-2 bg-slate-100 dark:bg-[#20212c] flex justify-center items-center rounded-lg\">\n            <img src={lightIcon} alt=\"sun indicating light mode\" />\n\n            <Switch\n              checked={darkSide}\n              onChange={toggleDarkMode}\n              className={`${\n                darkSide ? \"bg-[#635fc7]\" : \"bg-gray-200\"\n              } relative inline-flex h-6 w-11 items-center rounded-full`}\n            >\n              <span className=\"sr-only\">Enable notifications</span>\n              <span\n                className={`${\n                  darkSide ? \"translate-x-6\" : \"translate-x-1\"\n                } inline-block h-4 w-4 transform rounded-full bg-white transition`}\n              />\n            </Switch>\n\n            <img src={darkIcon} alt=\"moon indicating dark mode\" />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default HeaderDropDown;\n","/Users/admin/Davron/codes/taskt_xalq/n/src/modals/AddEditTaskModal.js",["114","115","116","117","118"],[],"import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { v4 as uuidv4 } from 'uuid';\nimport crossIcon from '../assets/icon-cross.svg';\nimport boardsSlice from '../redux/boardsSlice';\nimport axios from 'axios';\nimport {\n\tBASE_URL,\n\tcreateTask,\n\tdeleteTask,\n\teditTask,\n} from '../services/baseUrl';\n\nfunction AddEditTaskModal({\n\ttype,\n\tdevice,\n\tsetIsTaskModalOpen,\n\tsetIsAddTaskModalOpen,\n\ttaskIndex,\n\tprevColIndex = 0,\n}) {\n\tconst dispatch = useDispatch();\n\tconst [isFirstLoad, setIsFirstLoad] = useState(true);\n\tconst [isValid, setIsValid] = useState(true);\n\tconst [title, setTitle] = useState('');\n\tconst [description, setDescription] = useState('');\n\tconst board = useSelector((state) => state.boards).find(\n\t\t(board) => board.isActive\n\t);\n\tconst [file, setFile] = useState({\n\t\tname: '',\n\t\tfile: '',\n\t});\n\n\tconst columns = board.columns;\n\tconst col = columns.find((col, index) => index === prevColIndex);\n\tconst task = col\n\t\t? col.tasks.find((task, index) => index === taskIndex)\n\t\t: [];\n\tconst [status, setStatus] = useState(columns[prevColIndex].name);\n\tconst [newColIndex, setNewColIndex] = useState(prevColIndex);\n\tconst [subtasks, setSubtasks] = useState([\n\t\t{ title: '', isCompleted: false, id: uuidv4() },\n\t\t{ title: '', isCompleted: false, id: uuidv4() },\n\t]);\n\n\tconst onChangeSubtasks = (id, newValue) => {\n\t\tsetSubtasks((prevState) => {\n\t\t\tconst newState = [...prevState];\n\t\t\tconst subtask = newState.find((subtask) => subtask.id === id);\n\t\t\tsubtask.title = newValue;\n\t\t\treturn newState;\n\t\t});\n\t};\n\n\tconst onChangeStatus = (e) => {\n\t\tsetStatus(e.target.value);\n\t\tsetNewColIndex(e.target.selectedIndex);\n\t};\n\n\tconst validate = () => {\n\t\tsetIsValid(false);\n\t\tif (!title.trim()) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < subtasks.length; i++) {\n\t\t\tif (!subtasks[i].title.trim()) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tsetIsValid(true);\n\t\treturn true;\n\t};\n\n\tif (type === 'edit' && isFirstLoad) {\n\t\tsetSubtasks(\n\t\t\ttask.subtasks.map((subtask) => {\n\t\t\t\treturn { ...subtask, id: uuidv4() };\n\t\t\t})\n\t\t);\n\t\tsetTitle(task.title);\n\t\tsetDescription(task.description);\n\t\tsetIsFirstLoad(false);\n\t}\n\n\tconst onDelete = (id) => {\n\t\t// Delete task from API\n\n\t\tdeleteTask(id).then((data) => {\n\t\t\talert('deleted succesfully');\n\t\t});\n\n\t\tsetSubtasks((prevState) => prevState.filter((el) => el.id !== id));\n\t};\n\n\tconst onSubmit = (type) => {\n\t\tconst data = {\n\t\t\tname: 'task',\n\t\t\ttasks: [\n\t\t\t\t{\n\t\t\t\t\ttitle: title,\n\t\t\t\t\tdescription: description,\n\t\t\t\t\tstatus: 'Todo',\n\t\t\t\t\tfile: file,\n\t\t\t\t\tsubtasks: subtasks,\n\t\t\t\t},\n\t\t\t],\n\t\t};\n\t\tif (type === 'add') {\n\t\t\t// Create Task API\n\t\t\tcreateTask(data).then((data) => {\n\t\t\t\tconsole.log(data);\n\t\t\t});\n\t\t\tdispatch(\n\t\t\t\tboardsSlice.actions.addTask({\n\t\t\t\t\ttitle,\n\t\t\t\t\tdescription,\n\t\t\t\t\tsubtasks,\n\t\t\t\t\tstatus,\n\t\t\t\t\tnewColIndex,\n\t\t\t\t\tfile,\n\t\t\t\t})\n\t\t\t);\n\t\t} else {\n\t\t\t// Edit from API\n\t\t\teditTask(taskIndex, data).then((data) => {\n\t\t\t\tconsole.log(data);\n\t\t\t});\n\t\t\tdispatch(\n\t\t\t\tboardsSlice.actions.editTask({\n\t\t\t\t\ttitle,\n\t\t\t\t\tdescription,\n\t\t\t\t\tsubtasks,\n\t\t\t\t\tstatus,\n\t\t\t\t\ttaskIndex,\n\t\t\t\t\tprevColIndex,\n\t\t\t\t\tnewColIndex,\n\t\t\t\t\tfile,\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t};\n\n\tconst fileHandler = (evt) => {\n\t\tconst uploadedFile = evt.target.files?.[0];\n\n\t\tsetFile({\n\t\t\t...file,\n\t\t\tname: uploadedFile.name,\n\t\t});\n\n\t\tconst reader = new FileReader();\n\t\treader.onload = (event) => {\n\t\t\tsetFile({\n\t\t\t\t...file,\n\t\t\t\tfile: event.target.result,\n\t\t\t});\n\t\t};\n\t\treader.readAsDataURL(uploadedFile);\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tclassName={\n\t\t\t\tdevice === 'mobile'\n\t\t\t\t\t? '  py-6 px-6  absolute overflow-y-scroll  left-0 flex  right-0 bottom-[-100vh] top-0 dropdown '\n\t\t\t\t\t: '  py-6 px-6 absolute overflow-y-scroll  left-0 flex  right-0 bottom-0 top-0 dropdown '\n\t\t\t}\n\t\t\tonClick={(e) => {\n\t\t\t\tif (e.target !== e.currentTarget) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsetIsAddTaskModalOpen(false);\n\t\t\t}}>\n\t\t\t{/* Modal Section */}\n\n\t\t\t<div\n\t\t\t\tclassName=' scrollbar-hide overflow-y-scroll max-h-[95vh]  my-auto  bg-white dark:bg-[#2b2c37] text-black dark:text-white font-bold\n       shadow-md shadow-[#364e7e1a] max-w-md mx-auto  w-full px-8  py-8 rounded-xl'>\n\t\t\t\t<h3 className=' text-lg '>\n\t\t\t\t\t{type === 'edit' ? 'Edit' : 'Add New'} Task\n\t\t\t\t</h3>\n\n\t\t\t\t{/* Task Name */}\n\n\t\t\t\t<div className='mt-8 flex flex-col space-y-1'>\n\t\t\t\t\t<label className='  text-sm dark:text-white text-gray-500'>\n\t\t\t\t\t\tTask Name\n\t\t\t\t\t</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={title}\n\t\t\t\t\t\tonChange={(e) => setTitle(e.target.value)}\n\t\t\t\t\t\tid='task-name-input'\n\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\tclassName=' bg-transparent  px-4 py-2 outline-none focus:border-0 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-1  ring-0  '\n\t\t\t\t\t\tplaceholder=' e.g Take coffee break'\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t{/* Description */}\n\t\t\t\t<div className='mt-8 flex flex-col space-y-1'>\n\t\t\t\t\t<label className='  text-sm dark:text-white text-gray-500'>\n\t\t\t\t\t\tDescription\n\t\t\t\t\t</label>\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tvalue={description}\n\t\t\t\t\t\tonChange={(e) => setDescription(e.target.value)}\n\t\t\t\t\t\tid='task-description-input'\n\t\t\t\t\t\tclassName=' bg-transparent outline-none min-h-[200px] focus:border-0 px-4 py-2 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-[1px] '\n\t\t\t\t\t\tplaceholder=\"e.g. It's always good to take a break. This \n            15 minute break will  recharge the batteries \n            a little.\"\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t{/* FIle */}\n\t\t\t\t<div className='mt-8 flex flex-col space-y-1'>\n\t\t\t\t\t<label className='  text-sm dark:text-white text-gray-500'>\n\t\t\t\t\t\tFile\n\t\t\t\t\t</label>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype='file'\n\t\t\t\t\t\t// value={file.name}\n\t\t\t\t\t\tonChange={(e) => fileHandler(e)}\n\t\t\t\t\t\tclassName=' bg-transparent outline-none  focus:border-0 px-4 py-2 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-[1px] '\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t{/* Subtasks */}\n\n\t\t\t\t<div className='mt-8 flex flex-col space-y-3'>\n\t\t\t\t\t<label className='  text-sm dark:text-white text-gray-500'>\n\t\t\t\t\t\tSubtasks\n\t\t\t\t\t</label>\n\n\t\t\t\t\t{subtasks.map((subtask, index) => (\n\t\t\t\t\t\t<div key={index} className=' flex items-center w-full '>\n\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\tonChangeSubtasks(\n\t\t\t\t\t\t\t\t\t\tsubtask.id,\n\t\t\t\t\t\t\t\t\t\te.target.value\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\ttype='text'\n\t\t\t\t\t\t\t\tvalue={subtask.title}\n\t\t\t\t\t\t\t\tclassName=' bg-transparent outline-none focus:border-0 flex-grow px-4 py-2 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-[1px]  '\n\t\t\t\t\t\t\t\tplaceholder=' e.g Take coffee break'\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tsrc={crossIcon}\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\tonDelete(subtask.id);\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\tclassName=' m-4 cursor-pointer '\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t))}\n\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=' w-full items-center dark:text-[#635fc7] dark:bg-white  text-white bg-[#635fc7] py-2 rounded-full '\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tsetSubtasks((state) => [\n\t\t\t\t\t\t\t\t...state,\n\t\t\t\t\t\t\t\t{ title: '', isCompleted: false, id: uuidv4() },\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}}>\n\t\t\t\t\t\t+ Add New Subtask\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\n\t\t\t\t{/* current Status  */}\n\t\t\t\t<div className='mt-8 flex flex-col space-y-3'>\n\t\t\t\t\t<label className='  text-sm dark:text-white text-gray-500'>\n\t\t\t\t\t\tCurrent Status\n\t\t\t\t\t</label>\n\t\t\t\t\t<select\n\t\t\t\t\t\tvalue={status}\n\t\t\t\t\t\tonChange={onChangeStatus}\n\t\t\t\t\t\tclassName=' select-status flex-grow px-4 py-2 rounded-md text-sm bg-transparent focus:border-0  border-[1px] border-gray-300 focus:outline-[#635fc7] outline-none'>\n\t\t\t\t\t\t{columns.map((column, index) => (\n\t\t\t\t\t\t\t<option key={index}>{column.name}</option>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</select>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tconst isValid = validate();\n\t\t\t\t\t\t\tif (isValid) {\n\t\t\t\t\t\t\t\tonSubmit(type);\n\t\t\t\t\t\t\t\tsetIsAddTaskModalOpen(false);\n\t\t\t\t\t\t\t\ttype === 'edit' && setIsTaskModalOpen(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tclassName=' w-full items-center text-white bg-[#635fc7] py-2 rounded-full '>\n\t\t\t\t\t\t{type === 'edit' ? ' save edit' : 'Create task'}\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default AddEditTaskModal;\n","/Users/admin/Davron/codes/taskt_xalq/n/src/modals/DeleteModal.js",[],[],"/Users/admin/Davron/codes/taskt_xalq/n/src/modals/AddEditBoardModal.js",["119","120"],[],"import React, { useState } from \"react\";\nimport crossIcon from \"../assets/icon-cross.svg\";\nimport boardsSlice from \"../redux/boardsSlice\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nfunction AddEditBoardModal({ setIsBoardModalOpen, type ,setBoardType , device }) {\n  const dispatch = useDispatch();\n  const [isFirstLoad, setIsFirstLoad] = useState(true);\n  const [name, setName] = useState(\"\");\n  const [newColumns, setNewColumns] = useState([\n    { name: \"Todo\", tasks: [], id: uuidv4() },\n    { name: \"Doing\", tasks: [], id: uuidv4() },\n  ]);\n  const [isValid, setIsValid] = useState(true);\n  const board = useSelector((state) => state.boards).find(\n    (board) => board.isActive\n  );\n\n  if (type === \"edit\" && isFirstLoad) {\n    setNewColumns(\n      board.columns.map((col) => {\n        return { ...col, id: uuidv4() };\n      })\n    );\n    setName(board.name);\n    setIsFirstLoad(false);\n  }\n\n  const validate = () => {\n    setIsValid(false);\n    if (!name.trim()) {\n      return false;\n    }\n    for (let i = 0 ; i < newColumns.length ; i++) {\n      if (!newColumns[i].name.trim()) {\n        return false;\n      }\n    }\n    setIsValid(true);\n    return true;\n  };\n\n  const onChange = (id, newValue) => {\n    setNewColumns((prevState) => {\n      const newState = [...prevState];\n      const column = newState.find((col) => col.id === id);\n      column.name = newValue;\n      return newState;\n    });\n  };\n\n  const onDelete = (id) => {\n    setNewColumns((prevState) => prevState.filter((el) => el.id !== id));\n  };\n\n  const onSubmit = (type) => {\n    setIsBoardModalOpen(false);\n    if (type === \"add\") {\n      dispatch(boardsSlice.actions.addBoard({ name, newColumns }));\n    } else {\n      dispatch(boardsSlice.actions.editBoard({ name, newColumns }));\n    }\n  };\n\n  return (\n    <div\n      className=\"  fixed right-0 top-0 px-2 py-4 overflow-scroll scrollbar-hide  z-50 left-0 bottom-0 justify-center items-center flex dropdown \"\n      onClick={(e) => {\n        if (e.target !== e.currentTarget) {\n          return;\n        }\n        setIsBoardModalOpen(false);\n      }}\n    >\n      <div\n        className=\" scrollbar-hide overflow-y-scroll max-h-[95vh]  bg-white dark:bg-[#2b2c37] text-black dark:text-white font-bold\n       shadow-md shadow-[#364e7e1a] max-w-md mx-auto my-auto w-full px-8  py-8 rounded-xl\"\n      >\n        <h3 className=\" text-lg \">\n          {type === \"edit\" ? \"Edit\" : \"Add New\"} Board\n        </h3>\n\n        {/* Task Name */}\n\n        <div className=\"mt-8 flex flex-col space-y-1\">\n          <label className=\"  text-sm dark:text-white text-gray-500\">\n            Board Name\n          </label>\n          <input\n            className=\" bg-transparent  px-4 py-2 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-1  ring-0  \"\n            placeholder=\" e.g Web Design\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            id=\"board-name-input\"\n          />\n        </div>\n\n        {/* Board Columns */}\n\n        <div className=\"mt-8 flex flex-col space-y-3\">\n          <label className=\" text-sm dark:text-white text-gray-500\">\n            Board Columns\n          </label>\n\n          {newColumns.map((column, index) => (\n            <div key={index} className=\" flex items-center w-full \">\n              <input\n                className=\" bg-transparent flex-grow px-4 py-2 rounded-md text-sm  border-[0.5px] border-gray-600 focus:outline-[#635fc7] outline-[1px]  \"\n                onChange={(e) => {\n                  onChange(column.id, e.target.value);\n                }}\n                type=\"text\"\n                value={column.name}\n              />\n              <img\n                src={crossIcon}\n                onClick={() => {\n                  onDelete(column.id);\n                }}\n                className=\" m-4 cursor-pointer \"\n              />\n            </div>\n          ))}\n          <div>\n            <button\n              className=\" w-full items-center hover:opacity-70 dark:text-[#635fc7] dark:bg-white  text-white bg-[#635fc7] py-2 rounded-full \"\n              onClick={() => {\n                setNewColumns((state) => [\n                  ...state,\n                  { name: \"\", tasks: [], id: uuidv4() },\n                ]);\n              }}\n            >\n              + Add New Column\n            </button>\n            <button\n              onClick={() => {\n                const isValid = validate();\n                if (isValid === true) onSubmit(type);\n              }}\n              className=\" w-full items-center hover:opacity-70 dark:text-white dark:bg-[#635fc7] mt-8 relative  text-white bg-[#635fc7] py-2 rounded-full\"\n            >\n              {type === \"add\" ? \"Create New Board\" : \"Save Changes\"}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default AddEditBoardModal;\n","/Users/admin/Davron/codes/taskt_xalq/n/src/components/Task.js",[],[],"/Users/admin/Davron/codes/taskt_xalq/n/src/hooks/useDarkMode.js",["121"],[],"import React, { useEffect, useState } from 'react'\n\nfunction useDarkMode() {\n    \n  const [theme, setTheme] = useState(localStorage.theme)\n  const colorTheme = theme === \"dark\" ? \"light\" : \"dark\";\n\n  useEffect(() => {\n\n    const root = window.document.documentElement;\n    root.classList.remove(colorTheme);\n    root.classList.add(theme);\n    localStorage.setItem('theme', theme);\n\n}, [theme, colorTheme]);\n\nreturn [colorTheme, setTheme]\n\n}\n\nexport default useDarkMode","/Users/admin/Davron/codes/taskt_xalq/n/src/modals/TaskModal.js",[],[],"/Users/admin/Davron/codes/taskt_xalq/n/src/components/Subtask.js",[],[],"/Users/admin/Davron/codes/taskt_xalq/n/src/services/baseUrl.js",[],[],{"ruleId":"122","severity":1,"message":"123","line":7,"column":10,"nodeType":"124","messageId":"125","endLine":7,"endColumn":20},{"ruleId":"122","severity":1,"message":"126","line":18,"column":9,"nodeType":"124","messageId":"125","endLine":18,"endColumn":14},{"ruleId":"122","severity":1,"message":"127","line":18,"column":16,"nodeType":"124","messageId":"125","endLine":18,"endColumn":24},{"ruleId":"128","severity":1,"message":"129","line":32,"column":5,"nodeType":"130","endLine":32,"endColumn":7,"suggestions":"131"},{"ruleId":"128","severity":1,"message":"132","line":29,"column":6,"nodeType":"130","endLine":29,"endColumn":16,"suggestions":"133"},{"ruleId":"134","severity":1,"message":"135","line":68,"column":12,"nodeType":"136","endLine":71,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":83,"column":11,"nodeType":"136","endLine":86,"endColumn":13},{"ruleId":"134","severity":1,"message":"135","line":54,"column":15,"nodeType":"136","endLine":54,"endColumn":71},{"ruleId":"134","severity":1,"message":"135","line":65,"column":13,"nodeType":"136","endLine":65,"endColumn":70},{"ruleId":"122","severity":1,"message":"137","line":1,"column":17,"nodeType":"124","messageId":"125","endLine":1,"endColumn":26},{"ruleId":"122","severity":1,"message":"138","line":6,"column":8,"nodeType":"124","messageId":"125","endLine":6,"endColumn":13},{"ruleId":"122","severity":1,"message":"139","line":8,"column":2,"nodeType":"124","messageId":"125","endLine":8,"endColumn":10},{"ruleId":"122","severity":1,"message":"140","line":24,"column":9,"nodeType":"124","messageId":"125","endLine":24,"endColumn":16},{"ruleId":"134","severity":1,"message":"135","line":250,"column":8,"nodeType":"136","endLine":256,"endColumn":10},{"ruleId":"122","severity":1,"message":"140","line":15,"column":10,"nodeType":"124","messageId":"125","endLine":15,"endColumn":17},{"ruleId":"134","severity":1,"message":"135","line":116,"column":15,"nodeType":"136","endLine":122,"endColumn":17},{"ruleId":"122","severity":1,"message":"141","line":1,"column":8,"nodeType":"124","messageId":"125","endLine":1,"endColumn":13},"no-unused-vars","'deleteTask' is defined but never used.","Identifier","unusedVar","'tasks' is assigned a value but never used.","'setTasks' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["142"],"React Hook useEffect has a missing dependency: 'colors'. Either include it or remove the dependency array.",["143"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'useEffect' is defined but never used.","'axios' is defined but never used.","'BASE_URL' is defined but never used.","'isValid' is assigned a value but never used.","'React' is defined but never used.",{"desc":"144","fix":"145"},{"desc":"146","fix":"147"},"Update the dependencies array to be: [dispatch]",{"range":"148","text":"149"},"Update the dependencies array to be: [colors, dispatch]",{"range":"150","text":"151"},[1069,1071],"[dispatch]",[777,787],"[colors, dispatch]"]